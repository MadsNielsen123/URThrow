// Create a vector to store the timings
        std::vector<double> timings;

    // Open a file to save the timings
    std::ofstream outputFile("timings.txt");

    if (!outputFile.is_open()) {
        std::cerr << "Error opening file for writing!" << std::endl;
        return 1;
    }

    for (int i = 0; i < 100; ++i) {
        UR.moveL(0, 0, 0, 0, 0);
        UR.gripper_gripBall();
        UR.moveL(0, 0, 0.05, 0, 0);
        UR.moveL(0.05, 0.05, 0.05, 0, 0);
        UR.moveL(0.05, 0.05, 0.01, 0, 0);

        // Start timer for gripper_releaseBall
        auto startTime = std::chrono::high_resolution_clock::now();
        UR.gripper_releaseBall();
        auto endTime = std::chrono::high_resolution_clock::now();

        // Calculate the duration in milliseconds
        double elapsedTime = std::chrono::duration<double, std::milli>(endTime - startTime).count();
        timings.push_back(elapsedTime);

        // Save the timing immediately
        outputFile << elapsedTime << " ms" << std::endl;
        std::this_thread::sleep_for(std::chrono::seconds(1));
        UR.gripper_home();
        UR.moveL(0.05, 0.05, 0.005, 0, 0);
        UR.gripper_gripBall();
        UR.moveL(0.05, 0.05, 0.04, 0, 0);
        UR.moveL(0, 0, 0.005, 0, 0);

        // Start timer for second gripper_releaseBall
        startTime = std::chrono::high_resolution_clock::now();
        UR.gripper_releaseBall();
        endTime = std::chrono::high_resolution_clock::now();

        // Calculate the duration in milliseconds
        elapsedTime = std::chrono::duration<double, std::milli>(endTime - startTime).count();
        timings.push_back(elapsedTime);

        // Save the timing immediately
        outputFile << elapsedTime << " ms" << std::endl;
        std::this_thread::sleep_for(std::chrono::seconds(1));
        UR.gripper_home();
    }

    // Close the file
    outputFile.close();
